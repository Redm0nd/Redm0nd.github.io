---
layout: post
title: "CloudFormation vs. Terraform in 2024"
date: 2024-03-18 08:00:30 +0100
categories: jekyll update
published: true
---

# An "Expert's" Insight

## Preface

My journey with IaC began in 2018, focusing exclusively on CloudFormation. Over the years, I honed my skills to become a Subject Matter Expert in CloudFormation while working at AWS. This involved a lot of things, mainly ,providing complex work evidence of solving CFN issues for customers and also passing a board with the CFN dev team in Seattle. However, in 2022, I took an exciting turn when I left AWS, where Terraform would be the go-to tool for all things IaC in my new company. This transition offered me a unique perspective on both tools, and in this post, I'll share my insights, comparing CloudFormation and Terraform across various dimensions when deploying infra to AWS.

Having used both tools extensively for the past few years now I'll offer my perspective on using both tools below and where I think things will go over the next few years. 

### Ecosystem

**CloudFormation:** As a native AWS service, CloudFormation is tightly integrated with AWS, providing out-of-the-box support for almost every AWS resource. Its ecosystem is robust, with a wealth of templates and a supportive community. However, it can be somewhat insular, primarily catering to AWS resources.

**Terraform:** Terraform's ecosystem is expansive, supporting multiple providers beyond just AWS. Its modular approach, with the use of Terraform Registry, offers a vast collection of modules contributed by the community, enhancing its adaptability and extensibility across various cloud platforms and services.

### Compatibility/Support

**CloudFormation:** CloudFormation launched back in 2011 and whether you view this as a pro or con any template written on Day 1 of CloudFormation can still be deployed today without issues or errors. For example, when working older, more mature code bases this can be a benefit during updates. AWS will always support that JSON or YAML template.

Whereas with Terraform, when you go to revisit your long running RDS DB that's reaching EOL support, you'll be faced with major upgrade changes for the [terraform-provider-aws](https://github.com/hashicorp/terraform-provider-aws/issues/29842). Similarly, your `template_files` may no longer be supported and you need to spend time updating code to use the newer [templatefile](https://developer.hashicorp.com/terraform/language/functions/templatefile) function.

Some other issues I've noticed creeping up recently are with resource AWS support and updates from Terraform. At re:invent 2023 we got [periodic recording for Config](https://aws.amazon.com/about-aws/whats-new/2023/11/aws-config-periodic-recording/) on November 26th, this was supposed to come with OOTB support from CloudFormation via the `RecordingMode` parameter, we didn't get it that night but had to wait until December 11th via [1861](https://github.com/aws-cloudformation/cloudformation-coverage-roadmap/issues/1861) not too long considering it's AWS' busiest week of the year and a lot of staff are in Vegas:

```
Type: AWS::Config::ConfigurationRecorder
Properties:
  Name: String
  RecordingGroup: 
    RecordingGroup
  RecordingMode: 
    RecordingMode
  RoleARN: String
```

But it took a whopping 3 months to reach Terraform support on February 23rd 2024 when it was delivered in [34577](https://github.com/hashicorp/terraform-provider-aws/issues/34577#issuecomment-1961262081)

Similarly, with CodePipeline we got the [V2 Pipeline Type](https://aws.amazon.com/about-aws/whats-new/2023/11/aws-codepipeline-pipeline-execution-source-revision-overrides/) for re:Invent week on November 22, 2023. This allows you to use a couple of new features but most importantly allowed you to avail of cheaper Pipeline costs via the new type. This came with same day support via CloudFormation `PipelineType` [parameter](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codepipeline-pipeline.html#cfn-codepipeline-pipeline-pipelinetype).

This was brought to Terraform in January 2024 via [34122](https://github.com/hashicorp/terraform-provider-aws/issues/34122).

I'm not complaining about having to wait here and understand that the aws terraform provider is maintained by a [small team](https://hashicorp.github.io/terraform-provider-aws/), I just suspected these changes to be implemented at a quicker rate with the maturitity of the AWS provider.

Another example of gaps in support I was surprised to see were with data sources. To this day there's no support for HTTP API Gateway custom domain name data blocks in Terraform, I suspect shortly after publishing this though it will be provided via [36027](https://github.com/hashicorp/terraform-provider-aws/issues/36027):

```
data "aws_apigatewayv2_domain_name" "example" {
  domain_name = "api.example.com"
}
```


### Speed

**CloudFormation:** CloudFormation's execution speed is generally consistent, benefiting from direct integration with AWS. However, the speed can vary based on the complexity and size of the templates.

**Terraform:** Terraform is known for its efficient execution, particularly with its parallelism capabilities, which can significantly reduce deployment times. However, its speed can also depend on the specific configuration and the state management approach.

### Future of Both Tools

**CloudFormation:** As AWS continues to evolve, CloudFormation is expected to remain a key player, potentially expanding its capabilities and integration with other AWS services. Its future likely includes enhancements in usability and template management.

**Terraform:** Terraform's trajectory is towards broader ecosystem support, enhanced state management, and improved collaboration features. Its adaptability and community-driven development suggest a future where it remains a dominant force in the IaC landscape, accommodating evolving cloud technologies and practices.

## Conclusion

Both CloudFormation and Terraform have their strengths and areas for improvement. My personal experience has shown me the nuances of each, and I believe the choice between them often depends on specific project needs, organizational context, and the desired breadth of cloud services. I look forward to continuing to explore these tools and sharing more insights with you.
